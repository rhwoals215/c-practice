//
//  karatsuba.cpp
//  
//
//  Created by Jaemin Ko on 30/03/2018.
//

#include "karatsuba.hpp"
#include <iostream>
#include <vector>

typedef std::vector<int> poly;
using namespace std;

int max(int m, int n)//method to find max
{
    if (m>n)
        return m;
    else
        return n;
}

poly add(poly a, poly b)//method to add polynomials
{
    poly result_poly;
    int order = max(a.size(),b.size());
    result_poly.resize(order);
    a.resize(order);
    b.resize(order);
    for( int i=0; i<order; i++)
    {
        result_poly[i]=a[i]+b[i];
    }
    return result_poly;
}

poly subtract(poly a, poly b)//method to subtract polynomials
{
    poly result_poly;
    int order = max(a.size(),b.size());
    result_poly.resize(order);
    a.resize(order);
    b.resize(order);
    for( int i=0; i<order; i++)
    {
        result_poly[i]=a[i]-b[i];
    }
    return result_poly;
}

poly multiplyCoeffientAndShift(poly p,u_int deg_shift,int coeff)//degree shift for slow multiplication
{
    poly result;
    result.resize(p.size()+deg_shift);
    for(int i=0; i<p.size(); i++)
    {
        result[i+deg_shift]=p[i]*coeff;
    }
    return result;
}
poly slowMul(poly p1, poly p2)//slow multiplication
{
    poly result;
    int order=p1.size()*p2.size();
    result.resize(order);
    for( int i=0; i<p1.size(); i++)
    {
        poly tmp=multiplyCoeffientAndShift(p2,i,p1[i]);
        result=add(result, tmp);
    }
    return result;
}
poly karatsuba(poly p1, poly p2)
{
    poly result_poly;
    if (p1.size()==1)//base step when it is just multiplying single digits
    {
        result_poly.resize(1);
        result_poly[0] = p1[0]*p2[0];
        return result_poly;
    }
    poly p1a;//half of polynomial with lower degree
    poly p1b;//half of polynomial with higher degree
    poly p2a;
    poly p2b;
    poly e;
    poly f;
    int cut;
    int size = p1.size();//deciding the cut line
    if (size % 2 == 0)//if size is even
        cut = size / 2;
    else//if size is odd
        cut = ((size + 1) / 2);
    p1a.resize(cut);
    p1b.resize(size-cut);
    p2a.resize(cut);
    p2b.resize(size-cut);
    for( int i = 0; i < cut; i++)//assigning the cut
    {
        p1a[i] = p1[i];
    }
    for( int i = 0; i < (size - cut); i++)
    {
        p1b[i] = p1[i+cut];
    }
    for( int i = 0; i < cut; i++)
    {
        p2a[i] = p2[i];
    }
    for( int i = 0; i < (size - cut); i++)
    {
        p2b[i] = p2[i+cut];
    }
    poly c = karatsuba(p1b,p2b);//the higher degree karatsuba coefficient
    poly d = subtract(subtract(karatsuba((add(p1a,p1b)),(add(p2a,p2b))),karatsuba(p1a,p2a)),karatsuba(p1b,p2b));//middle degree karatsuba coefficient
    e.resize(2*cut+c.size());//higher degree karatsuba coeff multiplied by the x^n
    for( int i = 0; i < 2*cut; i++)
    {
        e[i] = 0;
    }
    for( int i = 0; i < c.size(); i++)
    {
        e[i+2*cut] = c[i];
    }
    f.resize(cut+d.size());//middle degree karatsuba coeff multiplied by the x^(n/2)
    for( int i = 0; i < cut; i++)
    {
        f[i] = 0;
    }
    for( int i = 0; i < d.size(); i++)
    {
        f[i+cut] = d[i];
    }
    return add(add(e,f),karatsuba(p1a,p2a));//adding the lower degree karatsuba terms
                
}

int main()
{
    poly p1;
    poly p2;
    p1.resize(981);//degree crossover point
    p2.resize(981);
    int rand1[] = { 6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1 };
    int rand2[] = { 7,3,7,2,4,5,8,7,4,0,6,6,0,6,3,1,5,5,8,8,1,7,4,8,8,1,5,2,0,9,2,4,6,8,3,5,0,3,6,2,1,2,3,4,5,6,7,8,3,7,2,3,4,5,6,7,8,9,0,1,2,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,7,3,7,2,4,5,8,7,4,0,6,6,0,6,3,1,5,5,8,8,1,7,4,8,8,1,5,2,0,9,2,4,6,8,3,5,0,3,6,2,1,2,3,4,5,6,7,8,3,7,2,3,4,5,6,7,8,9,0,1,2,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,7,3,7,2,4,5,8,7,4,0,6,6,0,6,3,1,5,5,8,8,1,7,4,8,8,1,5,2,0,9,2,4,6,8,3,5,0,3,6,2,1,2,3,4,5,6,7,8,3,7,2,3,4,5,6,7,8,9,0,1,2,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,7,3,7,2,4,5,8,7,4,0,6,6,0,6,3,1,5,5,8,8,1,7,4,8,8,1,5,2,0,9,2,4,6,8,3,5,0,3,6,2,1,2,3,4,5,6,7,8,3,7,2,3,4,5,6,7,8,9,0,1,2,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1,6,1,0,4,5,4,3,2,6,6,4,8,2,1,3,3,9,3,6,0,7,2,6,0,2,4,9,1,4,1,2,7,8,4,7,2,7,5,3,7,2,3,4,5,6,7,8,9,2,5,1,2,3,4,5,6,7,8,9,0,1 };

    for (int i = 0; i<981; i++){
        p1[i] = rand1[i];
    }
    for (int i = 0; i<981; i++){
        p2[i] = rand2[i];
    }
    cout << "The karatsuba product equals "<<endl;
    auto begin = chrono::high_resolution_clock::now();
    poly p3 = karatsuba(p1, p2);
    auto end = chrono::high_resolution_clock::now();
    for( int i = 0; i < p3.size(); i++)
    {
        cout << p3[i] << " ";
    }
    cout << endl;
    cout << chrono::duration_cast<chrono::nanoseconds>(end-begin).count() << "ns" << endl;
    cout << "The classic product equals "<<endl;
    begin = chrono::high_resolution_clock::now();
    poly p4 = slowMul(p1,p2);
    end = std::chrono::high_resolution_clock::now();
    for( int i = 0; i < p4.size(); i++)
    {
        cout << p4[i] << " ";
    }
    cout << endl;
    cout << chrono::duration_cast<chrono::nanoseconds>(end-begin).count() << "ns" << endl;
    return 0;
}
polynomial add(polynomial p1, polynomial p2){
    polynomial result;
    monomial temp;
    max_size = max(p1.size(),p2.size());
    temp.degree.resize(max_size)
    list<monomial>::iterator iter1=p1.terms.begin();
    list<monomial>::iterator iter2=p2.terms.begin();
    while( iter1 != terms.end() && iter2 ! = terms.end()){
        if (lexi_order(iter1->terms, iter2->terms)==0){
            temp.coeff = iter1->coeff + iter2->coeff;
            for( int i = 0; i < max_size; i++){
                temp.degree[i] = (iter1->degree)[i];
            }
            result.insert(temp);
        }
        if (lexi_order(iter1->terms, iter2->terms)==1)
            result.insert(iter1->terms);
        iter1 ++
        if (lexi_order(iter1->terms, iter2->terms)==-1)
            result.insert(iter2->terms);
        iter2 ++
    }
    cout << endl;
}
polynomial multiply_step(monomial a, polynomial b){
    polynomial result;
    list<monomial>::iterator iter=b.terms.begin();
    while(iter != b.terms.end()){
        monomial temp;
        int x = max(a.degree.size(), (iter->degree).size());
        temp.degree.resize(x);
        while (a.degree.size()!=x)
            a.degree.push_back(0);
        while (iter->degree.size()!=x)
            iter->degree.push_back(0);
        for (int i; i < x; i++){
            temp.degree[i] = (a.degree[i] + iter->degree[i]);
        }
        temp.coeff = (a.coeff * iter->coeff);
        result.insert(temp);
        iter++;
    }
    return result;
}


polynomial multiply(polynomial p1, polynomial p2)
{
    polynomial result;
    list<monomial>::iterator iter=p1.terms.begin();
    while(iter != p1.terms.end()){
        result = add(result,multiply_step(*iter, p2));
        iter++;
    }
    return result;
}

